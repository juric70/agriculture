// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace agriculture.Models
{
    public partial class masterContext : DbContext
    {
        public masterContext()
        {
        }

        public masterContext(DbContextOptions<masterContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Chore> Chore { get; set; }
        public virtual DbSet<ChorePerson> ChorePerson { get; set; }
        public virtual DbSet<ChoreStatus> ChoreStatus { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<ContractPlot> ContractPlot { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<GoodsType> GoodsType { get; set; }
        public virtual DbSet<Ground> Ground { get; set; }
        public virtual DbSet<IncomeAndExpenses> IncomeAndExpenses { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Plant> Plant { get; set; }
        public virtual DbSet<PlantType> PlantType { get; set; }
        public virtual DbSet<Plot> Plot { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Terrain> Terrain { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Chore>(entity =>
            {
                entity.ToTable("chore");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ChorePerson>(entity =>
            {
                entity.ToTable("chore_person");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.ChoreId).HasColumnName("chore_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.OrderStatusId).HasColumnName("order_status_id");

                entity.Property(e => e.PersonId).HasColumnName("person_id");

                entity.HasOne(d => d.Chore)
                    .WithMany(p => p.ChorePerson)
                    .HasForeignKey(d => d.ChoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__chore_per__chore__33008CF0");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.ChorePerson)
                    .HasForeignKey(d => d.OrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__chore_per__order__33F4B129");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.ChorePerson)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__chore_per__perso__34E8D562");
            });

            modelBuilder.Entity<ChoreStatus>(entity =>
            {
                entity.ToTable("chore_status");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("city");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.CountryId).HasColumnName("country_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("postal_code");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__city__country_id__35DCF99B");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.ToTable("contract");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.BeneficiaryId).HasColumnName("beneficiary_id");

                entity.Property(e => e.DateOfConclusion)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("date_of_conclusion");

                entity.Property(e => e.DateOfExpiration)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("date_of_expiration");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProviderId).HasColumnName("provider_id");

                entity.HasOne(d => d.Beneficiary)
                    .WithMany(p => p.ContractBeneficiary)
                    .HasForeignKey(d => d.BeneficiaryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__contract__benefi__36D11DD4");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.ContractProvider)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__contract__provid__37C5420D");
            });

            modelBuilder.Entity<ContractPlot>(entity =>
            {
                entity.ToTable("contract_plot");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.PlotId).HasColumnName("plot_id");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractPlot)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK__contract___contr__38B96646");

                entity.HasOne(d => d.Plot)
                    .WithMany(p => p.ContractPlot)
                    .HasForeignKey(d => d.PlotId)
                    .HasConstraintName("FK__contract___plot___39AD8A7F");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("country");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<GoodsType>(entity =>
            {
                entity.ToTable("goods_type");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Ground>(entity =>
            {
                entity.ToTable("ground");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<IncomeAndExpenses>(entity =>
            {
                entity.ToTable("income_and_expenses");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AmountOfGoods).HasColumnName("amount_of_goods");

                entity.Property(e => e.AmountOfPlants).HasColumnName("amount_of_plants");

                entity.Property(e => e.DateOfPlanting)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("date_of_planting");

                entity.Property(e => e.EndDateOfPlanting)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("end_date_of_planting");

                entity.Property(e => e.PlantId).HasColumnName("plant_id");

                entity.Property(e => e.PlotId).HasColumnName("plot_id");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.HasOne(d => d.Plant)
                    .WithMany(p => p.IncomeAndExpenses)
                    .HasForeignKey(d => d.PlantId)
                    .HasConstraintName("FK__income_an__plant__3AA1AEB8");

                entity.HasOne(d => d.Plot)
                    .WithMany(p => p.IncomeAndExpenses)
                    .HasForeignKey(d => d.PlotId)
                    .HasConstraintName("FK__income_an__plot___3B95D2F1");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("order");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AmountOfGoods).HasColumnName("amount_of_goods");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.OrderStatusId).HasColumnName("order_status_id");

                entity.Property(e => e.PlantId).HasColumnName("plant_id");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__order__customer___3C89F72A");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.OrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__order__order_sta__3D7E1B63");

                entity.HasOne(d => d.Plant)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.PlantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__order__plant_id__3E723F9C");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.ToTable("order_status");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("person");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Adress)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("adress");

                entity.Property(e => e.CityId).HasColumnName("city_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("full_name");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("phone_number");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Person)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK__person__city_id__3F6663D5");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Person)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK__person__role_id__405A880E");
            });

            modelBuilder.Entity<Plant>(entity =>
            {
                entity.ToTable("plant");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AmountOfGoods).HasColumnName("amount_of_goods");

                entity.Property(e => e.Description)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.GoodsTypeId).HasColumnName("goods_type_id");

                entity.Property(e => e.ManufacturerId).HasColumnName("manufacturer_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PlantTypeId).HasColumnName("plant_type_id");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.SubspeciesName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("subspecies_name");

                entity.HasOne(d => d.GoodsType)
                    .WithMany(p => p.Plant)
                    .HasForeignKey(d => d.GoodsTypeId)
                    .HasConstraintName("FK__plant__goods_typ__414EAC47");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Plant)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("FK__plant__manufactu__4242D080");

                entity.HasOne(d => d.PlantType)
                    .WithMany(p => p.Plant)
                    .HasForeignKey(d => d.PlantTypeId)
                    .HasConstraintName("FK__plant__plant_typ__4336F4B9");
            });

            modelBuilder.Entity<PlantType>(entity =>
            {
                entity.ToTable("plant_type");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Plot>(entity =>
            {
                entity.ToTable("plot");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Coordinates)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("coordinates");

                entity.Property(e => e.Corners)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("corners");

                entity.Property(e => e.GroundId).HasColumnName("ground_id");

                entity.Property(e => e.Longitudes)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("longitudes");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OwnerId).HasColumnName("owner_id");

                entity.Property(e => e.TerrainId).HasColumnName("terrain_id");

                entity.HasOne(d => d.Ground)
                    .WithMany(p => p.Plot)
                    .HasForeignKey(d => d.GroundId)
                    .HasConstraintName("FK__plot__ground_id__442B18F2");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Plot)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK__plot__owner_id__451F3D2B");

                entity.HasOne(d => d.Terrain)
                    .WithMany(p => p.Plot)
                    .HasForeignKey(d => d.TerrainId)
                    .HasConstraintName("FK__plot__terrain_id__46136164");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("role");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Terrain>(entity =>
            {
                entity.ToTable("terrain");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.GroundSlope).HasColumnName("ground_slope");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.SunPersence)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sun_persence");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}